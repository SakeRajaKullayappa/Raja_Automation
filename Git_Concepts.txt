Git Concepts::
==============

git Commands::
==============
init
add
commit
status
config
diff
log
ls
vim fileName


1 ==>> Install Git on Windows.
2 ==>> Create One Proj on any Location. (ex :: E drive)
3 ==>> Create some folders which are called as Working Copy's.
4 ==>> Create Local Repository.
		-->> git init (creates one Local Rep with "." extension)
			ex :: .git (in Linx "." will represent Hidden Files )
if we want to see Hidden Files => goto => View => Choose Hidden Files.


5 =>> git status command is use ful to show the status of the Files which are available in our Work Space.

6 => git add command is useful to add our Working dir Files in to Staging.
		git add -a 		==>> To add all Files
		git add (file name)	==>> To add Specific Files in to Staging.

7 => git rest Command useful to reset Staging Area Files/ Local Repo commits.

	Staging Area ::	git reset fileName
	Local Repo ::	git reset <mode> <commit id>
	
	mode ==>> mixed, soft, hard

rest with mixed -->> default mode, it will do undo on both Local Repo and Staging Area, it will not touches Working dir.
					==>> git reset --mixed <commit id>

rest with soft -->> it will do undo on Local Repo, it will not touches Working dir and Staging Area.
					==>> git reset --soft <commit id>

rest with hard -->> it will do undo on Local Repo, Staging Area and Working dir.
					==>> git reset --hard <commit id>

8 => git commit is useful to add our Staging Area Files in to Local Repo.

	before Commiting to Local Repo we have to set User Configurations by the First Time
		git config --global user.email "rajakullayappa0520@gmail.com"
		git config --global user.name "Raja"

==>> 	git commit -m "provide comment(ex: this is my first commit)"

9 ==>> git log command will show the no.of commits which are done by you along with the details.

10 => Lets consider we are modified some data in above files which are already committed to Local repo. so, agai we need to do "add" and "commit" commands.
		so, instead of doing "add" and "commit" commands we can directly use below command.
		==>> git commit -a -m "comment"


11 => To Compair File Content B/W any of Working , Staging, Local Repo, or Remote Repo. use 
			=====>>>	git diff command 

12 =>> vim filename command is uesful to create new file in Linx.


Req1 : I would like to see diff in File Content b/w Working dir and Staging Area.

diff --git a/Git_Concepts.txt b/Git_Concepts.txt
index 7822f32..ecd6fc7 100644
--- a/Git_Concepts.txt
+++ b/Git_Concepts.txt
@@ -15,7 +15,6 @@ vim fileName

		git a/Git_Concepts.txt		==>> reprasents source( Staging Area)
		b/Git_Concepts.txt		==>> reprasents destination( Working dir)
		7822f32			==>> Hash of the file content from source/ Staging
		ecd6fc7			==>> Hash of the file content from destination/ Working dir
		--- a/Git_Concepts.txt		==>> Missing Source Content
		+++ b/Git_Concepts.txt		==>> New Lines added in the destination


13 => git rm Command is useful to remove the Files from Working dir/ Staging Area.

	Req1:: remove files from Working dir/ Staging Area.
		==>> git rm fileName
		==>> git rm -r.		-->> it will remove all the files from Working dir/ Staging Area.

	Req1:: remove files from only Staging Area.
		==>> git rm --cached fileName

	Req1:: remove files from only Working dir.
		==>> rm fileName

14 => ls Command will show the Files which are in Working dir.

15 => git ls-files Command will show the Files which are in Staging Area.

16 => git chekout fileName Command
-->> we can use checkout command to discard unstaged changes in the Tracking Files of Working dir.

	In Working dir, UnTracked Files ==>> The Files which are already there in Working dir but they are not added to Staging Are/ Local Repo.
	In Working dir, Tracked Files ==>> The Files which are already there in Working dir but they are added to Staging Are/ Local Repo atleast once.

-->> checkout command works only for Working dir.
-->> to discard unstaged changes (the changes which are not addeed to the Staging Are)
-->> Tracked Files (they are added to Staging Are/ Local Repo atleast once)


16 => cat fileName 	==>> If we want to print content of the file, which is there in Working dir


==>> Once we are done "git commit" on Local Repo, Master Branch will creates.
==>> Master Branch is the main Branch, and all Source code will be maintained in Master Branch.
==>> From Git Branching we can achive Parallel Development.

Git Branching::
===============
==>> 	* indicates active branch

1) To View Available Branches.
	git branch

	git status

2) Create New Branch
	git branch <branchName(Raja_QA_Branch1)>

3) Switching of One branch to Another branch.
	git checkout <branchName>

4) Creating & Switching to Branch.
		git checkout -b <branchName>


Merging::
==========

Fast-Forword Merge::
--------------------
==>>	When ever we want Merge New Branch Commits with Master Barnch, we need to Merge it from Master Branch Only.
 			==>> git merge <newBranchName>

Three-Way Merge::
-----------------
==>> Not recommended.


Remote Repo (Git Hub)::
=======================

1) Cloning of Project From GitHub to Local Repo.
		git clone

2) Tester/Dev have some code in Local Repo, he/she wants push theire code in to Remote Repo.
		git push

3) new changes in Remote Repo, but not in Local Repo. Tester/Dev wants it to there Local Repo
		git pull


My Remote Repo URL :: https://github.com/SakeRajaKullayappa/Raja_Automation.git

















